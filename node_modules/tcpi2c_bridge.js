const util = require('util');
const { spawn } = require('child_process');
const { Duplex } = require('stream');
const debug = util.debuglog('tcpi2c_bridge');

class Connection extends Duplex {
	constructor(callback) {
		super({});
		debug("Spawning nc...");
		this.nc = spawn('nc', ['myrio', 1234]);
		this.nc.stdout.on('data', (chunk) => {
			debug("< %o", chunk);
			if (!this.push(chunk))
				this.nc.stdout.pause();
		});
		this.nc.stdout.on('end', () => this.push(null));
		this.nc.on('error', error => this.emit('error', error));
		this.nc.on('close', (code, signal) => {
			debug("nc closed.");
			this.emit('close')
		});
		this.nc.stderr.on('data', chunk => debug("nc: %s", chunk));
		if (callback) setImmediate(callback);
	}

	_write(chunk, encoding, callback) {
		debug("> %o (%s)", chunk, encoding);
		this.nc.stdin.write(...arguments);
	}

	_destroy(err, callback) {
		try {
			debug("Killing nc...");
			this.nc.kill();
		} catch (e) {
			callback(e);
		}
		callback();
	}

	_final() {
		debug("EOF");
		this.nc.stdin.end(...arguments)
	}

	_read(size) {
		this.nc.stdout.resume();
	}
}
module.exports = Connection;
